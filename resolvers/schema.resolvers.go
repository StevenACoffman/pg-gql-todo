package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"github.com/StevenACoffman/gqlgen-todos/generated/gql"
	"github.com/StevenACoffman/gqlgen-todos/generated/gql/model"
	"github.com/StevenACoffman/gqlgen-todos/generated/todosql"
	"github.com/StevenACoffman/gqlgen-todos/sqldb"
	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	poolConn, err := r.DBPool.Conn(context.Background())
	if err != nil {
		return nil, err
	}
	defer poolConn.Close()
	q := todosql.New(poolConn)
	sqltodo, err := q.CreateTodo(ctx, input.Text)
	if err != nil {
		return nil, err
	}

	return sqldb.ConvertSQLtoGQLTodo(sqltodo), nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	poolConn, err := r.DBPool.Conn(context.Background())
	if err != nil {
		return nil, err
	}
	defer poolConn.Close()
	var todo *model.Todo
	q := todosql.New(poolConn)
	id, err := uuid.Parse(input.ID)
	if err != nil {
		return nil, err
	}

	sqltodo, err := q.UpdateTodo(ctx, &todosql.UpdateTodoParams{
		ID:   id,
		Done: input.Done,
	})
	if err != nil {
		return nil, err
	}

	todo = &model.Todo{
		ID:   fmt.Sprintf("%v", sqltodo.ID.String()),
		Text: sqltodo.Description,
		Done: sqltodo.Done,
	}
	return todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, todoID string) (string, error) {
	id, err := uuid.Parse(todoID)
	if err != nil {
		return "", err
	}
	poolConn, err := r.DBPool.Conn(context.Background())
	if err != nil {
		return "", err
	}
	defer poolConn.Close()
	q := todosql.New(poolConn)

	err = q.DeleteTodo(ctx, id)

	if err != nil {
		return "", err
	}
	return todoID, nil
}

// GetTodo is the resolver for the getTodo field.
func (r *queryResolver) GetTodo(ctx context.Context, todoID string) (*model.Todo, error) {
	poolConn, err := r.DBPool.Conn(context.Background())
	if err != nil {
		return nil, err
	}
	defer poolConn.Close()
	q := todosql.New(poolConn)
	id, err := uuid.Parse(todoID)
	if err != nil {
		return nil, err
	}
	sqltodo, err := q.GetTodo(ctx, id)
	if err != nil {
		return nil, err
	}
	return sqldb.ConvertSQLtoGQLTodo(sqltodo), nil
}

func (r *queryResolver) AllTodos(ctx context.Context) ([]*model.Todo, error) {
	poolConn, err := r.DBPool.Conn(context.Background())
	if err != nil {
		return nil, err
	}
	defer poolConn.Close()
	q := todosql.New(poolConn)
	sqltodos, err := q.ListTodos(ctx)
	if err != nil {
		return nil, err
	}
	var todos []*model.Todo
	for _, sqltodo := range sqltodos {
		todos = append(todos, sqldb.ConvertSQLtoGQLTodo(sqltodo))
	}
	return todos, nil
}

// Mutation returns gql.MutationResolver implementation.
func (r *Resolver) Mutation() gql.MutationResolver { return &mutationResolver{r} }

// Query returns gql.QueryResolver implementation.
func (r *Resolver) Query() gql.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: todos.sql

package todosql

import (
	"context"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (
    description
) VALUES (
             $1
         ) RETURNING id, description, done, created_at, last_modified_at
`

func (q *Queries) CreateTodo(ctx context.Context, description string) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, description)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Done,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return &i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, description, done, created_at, last_modified_at FROM todo
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id uuid.UUID) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Done,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return &i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, description, done, created_at, last_modified_at FROM todo
ORDER BY created_at
`

func (q *Queries) ListTodos(ctx context.Context) ([]*Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Done,
			&i.CreatedAt,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo
SET done = $2
WHERE id = $1
RETURNING id, description, done, created_at, last_modified_at
`

type UpdateTodoParams struct {
	ID   uuid.UUID `db:"id" json:"id"`
	Done bool      `db:"done" json:"done"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg *UpdateTodoParams) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.ID, arg.Done)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Done,
		&i.CreatedAt,
		&i.LastModifiedAt,
	)
	return &i, err
}
